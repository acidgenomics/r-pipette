% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/AllGenerics.R, R/import-methods.R
\name{import}
\alias{import}
\alias{import,character,missing,missing-method}
\alias{import,character,character,missing-method}
\alias{import,PipetteRDSFile,missing,missing-method}
\alias{import,PipetteRDataFile,missing,missing-method}
\alias{import,PipetteDelimFile,missing,missing-method}
\alias{import,PipetteLinesFile,missing,missing-method}
\alias{import,PipetteExcelFile,missing,missing-method}
\alias{import,PipetteBAMFile,missing,missing-method}
\alias{import,PipetteBCFFile,missing,missing-method}
\alias{import,PipetteCRAMFile,missing,missing-method}
\alias{import,PipetteFASTAFile,missing,missing-method}
\alias{import,PipetteFASTQFile,missing,missing-method}
\alias{import,PipetteGCTFile,missing,missing-method}
\alias{import,PipetteGMTFile,missing,missing-method}
\alias{import,PipetteGMXFile,missing,missing-method}
\alias{import,PipetteGRPFile,missing,missing-method}
\alias{import,PipetteJSONFile,missing,missing-method}
\alias{import,PipetteMAFFile,missing,missing-method}
\alias{import,PipetteMTXFile,missing,missing-method}
\alias{import,PipetteOBOFile,missing,missing-method}
\alias{import,PipettePZFXFile,missing,missing-method}
\alias{import,PipetteSAMFile,missing,missing-method}
\alias{import,PipetteVCFFile,missing,missing-method}
\alias{import,PipetteYAMLFile,missing,missing-method}
\alias{import,PipetteBcbioCountsFile,missing,missing-method}
\alias{import,PipetteRioFile,missing,missing-method}
\alias{import,PipetteRtracklayerFile,missing,missing-method}
\alias{import,textConnection,character,missing-method}
\alias{import,missing,missing,missing-method}
\alias{import,missing,character,missing-method}
\title{Import}
\usage{
import(con, format, text, ...)

\S4method{import}{character,missing,missing}(con, format, text, ...)

\S4method{import}{character,character,missing}(con, format, text, ...)

\S4method{import}{PipetteRDSFile,missing,missing}(con, format, text, quiet = getOption(x = "acid.quiet", default = FALSE))

\S4method{import}{PipetteRDataFile,missing,missing}(con, format, text, quiet = getOption(x = "acid.quiet", default = FALSE))

\S4method{import}{PipetteDelimFile,missing,missing}(
  con,
  format,
  text,
  rownames = TRUE,
  rownameCol = NULL,
  colnames = TRUE,
  quote = "\\"",
  naStrings = naStrings,
  comment = "",
  skip = 0L,
  nMax = Inf,
  engine = getOption(x = "acid.import.engine", default = "base"),
  makeNames = getOption(x = "acid.import.make.names", default = syntactic::makeNames),
  metadata = getOption(x = "acid.import.metadata", default = FALSE),
  quiet = getOption(x = "acid.quiet", default = FALSE),
  verbose = getOption(x = "acid.verbose", default = FALSE)
)

\S4method{import}{PipetteLinesFile,missing,missing}(
  con,
  format,
  text,
  comment = "",
  skip = 0L,
  nMax = Inf,
  stripWhitespace = FALSE,
  removeBlank = FALSE,
  metadata = getOption(x = "acid.import.metadata", default = FALSE),
  engine = getOption(x = "acid.import.engine", default = "base"),
  quiet = getOption(x = "acid.quiet", default = FALSE),
  verbose = getOption(x = "acid.verbose", default = FALSE)
)

\S4method{import}{PipetteExcelFile,missing,missing}(
  con,
  format,
  text,
  sheet = 1L,
  rownames = TRUE,
  rownameCol = NULL,
  colnames = TRUE,
  skip = 0L,
  nMax = Inf,
  naStrings = naStrings,
  makeNames = getOption(x = "acid.import.make.names", default = syntactic::makeNames),
  metadata = getOption(x = "acid.import.metadata", default = FALSE),
  quiet = getOption(x = "acid.quiet", default = FALSE)
)

\S4method{import}{PipetteBAMFile,missing,missing}(con, format, text, quiet = getOption(x = "acid.quiet", default = FALSE))

\S4method{import}{PipetteBCFFile,missing,missing}(con, format, text, quiet = getOption(x = "acid.quiet", default = FALSE))

\S4method{import}{PipetteCRAMFile,missing,missing}(con, format, text, quiet = getOption(x = "acid.quiet", default = FALSE))

\S4method{import}{PipetteFASTAFile,missing,missing}(
  con,
  format,
  text,
  moleculeType = c("DNA", "RNA", "AA"),
  metadata = getOption(x = "acid.import.metadata", default = FALSE),
  quiet = getOption(x = "acid.quiet", default = FALSE)
)

\S4method{import}{PipetteFASTQFile,missing,missing}(
  con,
  format,
  text,
  moleculeType = c("DNA", "RNA"),
  metadata = getOption(x = "acid.import.metadata", default = FALSE),
  quiet = getOption(x = "acid.quiet", default = FALSE)
)

\S4method{import}{PipetteGCTFile,missing,missing}(
  con,
  format,
  text,
  metadata = getOption(x = "acid.import.metadata", default = FALSE),
  quiet = getOption(x = "acid.quiet", default = FALSE),
  return = c("matrix", "data.frame")
)

\S4method{import}{PipetteGMTFile,missing,missing}(con, format, text, quiet = getOption(x = "acid.quiet", default = FALSE))

\S4method{import}{PipetteGMXFile,missing,missing}(con, format, text, quiet = getOption(x = "acid.quiet", default = FALSE))

\S4method{import}{PipetteGRPFile,missing,missing}(con, format, text, quiet = getOption(x = "acid.quiet", default = FALSE))

\S4method{import}{PipetteJSONFile,missing,missing}(
  con,
  format,
  text,
  metadata = getOption(x = "acid.import.metadata", default = FALSE),
  quiet = getOption(x = "acid.quiet", default = FALSE)
)

\S4method{import}{PipetteMAFFile,missing,missing}(con, format, text, quiet = getOption(x = "acid.quiet", default = FALSE))

\S4method{import}{PipetteMTXFile,missing,missing}(
  con,
  format,
  text,
  rownamesFile,
  colnamesFile,
  metadata = getOption(x = "acid.import.metadata", default = FALSE),
  quiet = getOption(x = "acid.quiet", default = FALSE)
)

\S4method{import}{PipetteOBOFile,missing,missing}(con, format, text, quiet = getOption(x = "acid.quiet", default = FALSE))

\S4method{import}{PipettePZFXFile,missing,missing}(
  con,
  format,
  text,
  sheet = 1L,
  makeNames = getOption(x = "acid.import.make.names", default = syntactic::makeNames),
  metadata = getOption(x = "acid.import.metadata", default = FALSE),
  quiet = getOption(x = "acid.quiet", default = FALSE)
)

\S4method{import}{PipetteSAMFile,missing,missing}(con, format, text, quiet = getOption(x = "acid.quiet", default = FALSE))

\S4method{import}{PipetteVCFFile,missing,missing}(con, format, text, quiet = getOption(x = "acid.quiet", default = FALSE))

\S4method{import}{PipetteYAMLFile,missing,missing}(
  con,
  format,
  text,
  metadata = getOption(x = "acid.import.metadata", default = FALSE),
  quiet = getOption(x = "acid.quiet", default = FALSE)
)

\S4method{import}{PipetteBcbioCountsFile,missing,missing}(
  con,
  format,
  text,
  metadata = getOption(x = "acid.import.metadata", default = FALSE),
  quiet = getOption(x = "acid.quiet", default = FALSE)
)

\S4method{import}{PipetteRioFile,missing,missing}(
  con,
  format,
  text,
  rownames = TRUE,
  rownameCol = NULL,
  colnames = TRUE,
  makeNames = getOption(x = "acid.import.make.names", default = syntactic::makeNames),
  metadata = getOption(x = "acid.import.metadata", default = FALSE),
  quiet = getOption(x = "acid.quiet", default = FALSE),
  ...
)

\S4method{import}{PipetteRtracklayerFile,missing,missing}(
  con,
  format,
  text,
  metadata = getOption(x = "acid.import.metadata", default = FALSE),
  quiet = getOption(x = "acid.quiet", default = FALSE),
  ...
)

\S4method{import}{textConnection,character,missing}(
  con,
  format = c("csv", "tsv"),
  text,
  colnames = TRUE,
  quote = "\\"",
  naStrings = naStrings,
  quiet = getOption(x = "acid.quiet", default = FALSE)
)
}
\arguments{
\item{con}{\code{character(1)}, \code{connection}, or \code{missing}.
The connection from which data is loaded or to which data is saved. If this
is a character vector, it is assumed to be a filename, and a corresponding
file connection is created and then closed after exporting the object. If a
\code{BiocFile} derivative, the data is loaded from or saved to the underlying
resource.  If missing, the function will return the output as a character
vector, rather than writing to a connection.}

\item{format}{\code{character(1)} or \code{missing}.
An optional file format type, which can be used to override the file format
inferred from \code{con}. Only recommended for file and URL paths that don't
contain an extension.}

\item{text}{\code{character} or \code{missing}.
\emph{Not currently supported.}}

\item{...}{Additional arguments.}

\item{quiet}{\code{logical(1)}.
Perform command quietly, suppressing messages.}

\item{rownames}{\code{logical(1)}.
Automatically assign row names, if \code{rowname} column is defined.
Applies to file types that return a data frame only.}

\item{rownameCol}{\code{NULL}, \code{character(1)}, or \code{integer(1)}.
\emph{Applies only when \code{rownames = TRUE}.}
Column name to use for row names assignment.
If left \code{NULL} (default), the function will call \code{matchRownameCol()}
internally to attempt to automatically match the row name column (e.g.
\code{"rowname"} or \code{"rn"}).
Otherwise, can manually define using a scalar argument, either the name
directly or position in the column names.}

\item{colnames}{\code{logical(1)} or \code{character}.
Automatically assign column names, using the first header row.
Applies to file types that return \code{data.frame} only.
Pass in a \code{character} vector to define the column names manually.}

\item{quote}{\code{character(1)}.
The set of quoting characters.
To disable quoting altogether, use \code{quote = ""} (not generally recommended).
\emph{Applies to plain text delimited files only.}}

\item{naStrings}{\code{character}.
Character strings to reformat as \code{NA}.
Refer to \code{pipette::naStrings} for defaults.}

\item{comment}{\code{character(1)}.
Comment character to detect at beginning of line, which will skip when
parsing file. Use \code{""} to disable interpretation of comments, which is
particularly
useful when parsing lines.
\emph{Applies to plain text delimited and source code lines only.}}

\item{skip}{\code{integer(1)}.
Number of lines to skip.
\emph{Applies to delimited file (CSV, TSV), Excel Workbook, or lines.}}

\item{nMax}{\code{integer(1)} or \code{Inf}.
Maximum number of lines to parse.
\emph{Applies to plain text delimited, Excel, and source code lines only.}}

\item{engine}{\code{character(1)}.
Engine (package) to use for import.

Currently supported:
\itemize{
\item base
\item data.table
\item readr
}}

\item{makeNames}{\code{function}.
Apply syntactic naming function to (column) names.
Function is never applied to row names, when they are defined in object.}

\item{metadata}{\code{list}.
Metadata.}

\item{verbose}{\code{logical(1)}.
Run the function with verbose output.}

\item{stripWhitespace}{\code{logical(1)}.
Strip leading and/or trailing whitespace.
\emph{Applies to source code lines}.}

\item{removeBlank}{\code{logical(1)}.
Remove blank lines.
\emph{Applies to source code lines}.}

\item{sheet}{\code{character(1)} or \code{integer(1)}.
Sheet to read. Either a string (the name of a sheet), or an integer (the
position of the sheet). Defaults to the first sheet.
\emph{Applies to Excel Workbook, Google Sheet, or GraphPad Prism file.}}

\item{moleculeType}{\code{character(1)}.
Molecule type, either DNA or RNA.
Most RNA-seq FASTQ files contain complementary DNA (cDNA) sequences, not
direct sequencing of the RNA molecules.}

\item{return}{\code{character(1)}.
Object class to return.}

\item{rownamesFile, colnamesFile}{\code{character(1)} or \code{NULL}.
Row names and/or column names sidecare file.
Applies primarily to MatrixMarket Exchange files (e.g. \code{MTXFile}).}
}
\value{
Varies, depending on the file type (format):
\itemize{
\item \strong{R data serialized} (\code{RDS}):
\emph{variable}.\cr
Currently recommend over RDA, if possible.\cr
Imported by \code{readRDS()}.
\item \strong{R data} (\code{RDA}, \code{RDATA}):
\emph{variable}.\cr
Must contain a single object.
Doesn't require internal object name to match, unlike \code{loadData()}.\cr
Imported by \code{load()}.
\item \strong{Plain text delimited} (\code{CSV}, \code{TSV}, \code{TXT}):
\code{data.frame}.\cr
Data separated by commas, tabs, or visual spaces.\cr
Note that TXT structure is amgibuous and actively discouraged.\cr
Refer to \verb{Data frame return} section for details on how to change the
default return type to \code{DFrame}, \code{tbl_df} or \code{data.table}.\cr
Imported by \code{readr::read_delim()} by default.
\item \strong{Excel workbook} (\code{XLSB}, \code{XLSX}):
\code{data.frame}.\cr
Resave in plain text delimited format instead, if possible.\cr
Imported by \code{readxl::read_excel()}.
\item \strong{Legacy Excel workbook (pre-2007)} (\code{XLS}):
\code{data.frame}.\cr
Resave in plain text delimited format instead, if possible.\cr
Note that import of files in this format is slow.\cr
Imported by \code{readxl::read_excel()}.
\item \strong{GraphPad Prism project} (\code{PZFX}):
\code{data.frame}.\cr
Experimental. Consider resaving in CSV format instead.\cr
Imported by \code{pzfx::read_pzfx()}.
\item \strong{General feature format} (\code{GFF}, \code{GFF1}, \code{GFF2}, \code{GFF3}, \code{GTF}):
\code{GRanges}.\cr
Imported by \code{rtracklayer::import()}.
\item \strong{MatrixMarket exchange sparse matrix} (\code{MTX}):
\code{sparseMatrix}.\cr
Imported by \code{Matrix::readMM()}.
\item **Sequence alignment/map format (\code{SAM}, \code{BAM}, \code{CRAM}):
\code{list}.\cr
Imported by \code{Rsamtools::scanBam}.
\item \strong{Mutation annotation format} (\code{MAF}):
\code{MAF}.\cr
Imported by \code{maftools::read.maf()}.
\item \strong{Variant annotation format} (\code{VCF}, \code{BCF}):
\code{list}.\cr
Imported by \code{Rsamtools::scanBcf}.
\item \strong{Gene cluster text} (\code{GCT}):
\code{matrix} or \code{data.frame}.\cr
Imported by \code{readr::read_delim()}.
\item \strong{Gene sets (for GSEA)} (\code{GMT}, \code{GMX}):
\code{character}.
\item \strong{Browser extensible data} (\code{BED}, \code{BED15}, \code{BEDGRAPH}, \code{BEDPE}):
\code{GRanges}.\cr
Imported by \code{rtracklayer::import()}.
\item \strong{ChIP-seq peaks} (\code{BROADPEAK}, \code{NARROWPEAK}):
\code{GRanges}.\cr
Imported by \code{rtracklayer::import()}.
\item \strong{Wiggle track format} (\code{BIGWIG}, \code{BW}, \code{WIG}):
\code{GRanges}.\cr
Imported by \code{rtracklayer::import()}.
\item \strong{JSON serialization data} (\code{JSON}):
\code{list}.\cr
Imported by \code{jsonlite::read_json()}.
\item \strong{YAML serialization data} (\code{YAML}, \code{YML}):
\code{list}.\cr
Imported by \code{yaml::yaml.load_file()}.
\item \strong{Lines} (\code{LOG}, \code{MD}, \code{PY}, \code{R}, \code{RMD}, \code{SH}):
\code{character}.\cr
Source code or log files.\cr
Imported by \code{readr::read_delim()} by default.
\item \strong{Infrequently used rio-compatible formats} (\code{ARFF}, \code{DBF}, \code{DIF}, \code{DTA},
\code{MAT}, \code{MTP}, \code{ODS}, \code{POR}, \code{SAS7BDAT}, \code{SAV}, \code{SYD}, \code{REC}, \code{XPT}):
\emph{variable}.\cr
Imported by \code{rio::import()}.
}
}
\description{
Read file by extension into R.
}
\details{
\code{import()} supports automatic loading of common file types, by wrapping
popular importer functions. It intentionally designed to be simple, with few
arguments. Remote URLs and compressed files are supported. If you need more
complex import settings, just call the wrapped importer directly instead.
}
\note{
Updated 2023-09-19.
}
\section{Row and column names}{


\strong{Row names.} Row name handling has become an inconsistent mess in R because
of differential support in base R, tidyverse, data.table, and Bioconductor.
To maintain sanity, \code{import()} attempts to handle row names automatically.
The function checks for a \code{rowname} column in delimited data, and moves these
values into the object's row names, if supported by the return type (e.g.
\code{data.frame}, \code{DFrame}). Note that \code{tbl_df} (tibble) and \code{data.table}
intentionally do not support row names. When returning in this format, no
attempt to assign the \code{rowname} column into the return object's row names is
made. Note that \code{import()} is strict about this matching and only checks for
a \code{rowname} column, similar to the default syntax recommended in
\code{tibble::rownames_to_column()}. To disable this behavior, set \code{rownames = FALSE}, and no attempt will be made to set the row names.

\strong{Column names.} \code{import()} assumes that delimited files always contain
column names. If you are working with a file that doesn't contain column
names, either set \code{colnames = FALSE} or pass the names in as a \code{character}
vector. It's strongly recommended to always define column names in a
supported file type.
}

\section{FASTA and FASTQ files}{


FASTA and FASTQ files are currently managed internally by the Biostrings
package. Refer to \code{readDNAStringSet} and \code{readRNAStringSet} for details.
Import of these files will return \code{DNAStringSet} or \code{RNAStringSet} depending
on the input, defined by \code{moleculeType} argument.
}

\section{General feature format (GFF, GTF)}{


The GFF (General Feature Format) format consists of one line per feature,
each containing 9 columns of data, plus optional track definition lines. The
GTF (General Transfer Format) is identical to GFF version 2.

See also:
\itemize{
\item \href{https://useast.ensembl.org/info/website/upload/gff.html}{Ensembl spec}
\item \href{https://www.gencodegenes.org/pages/data_format.html}{GENCODE spec}
}
}

\section{Gene cluster text format (GCT)}{


Refer to the \href{https://software.broadinstitute.org/software/igv/GCT}{IGV GCT website} for details.
}

\section{GSEA gene set files}{


Refer to the Broad Institute \href{https://goo.gl/3ZkDPb}{GSEA wiki} for details.
}

\section{Matrix Market Exchange}{


Reading a Matrix Market Exchange file requires \code{ROWNAMES} and \code{COLNAMES}
sidecar files containing the corresponding row and column names of the sparse
matrix.
}

\section{bcbio-nextgen count matrix}{


\href{https://bcbio-nextgen.readthedocs.io/}{bcbio} count matrix (e.g. generated from featureCounts) and related
sidecar files are natively supported.
\itemize{
\item \code{COUNTS}: Counts table (e.g. RNA-seq aligned counts).
\item \code{COLNAMES}: Sidecar file containing column names.
\item \code{ROWNAMES}: Sidecar file containing row names.
}
}

\section{Denylisted extensions}{


These file formats are intentionally not supported:
\code{DOC}, \code{DOCX}, \code{PDF}, \code{PPT}, \code{PPTX}.
}

\section{Duplicate methods}{


\code{GMTFile} and \code{OBOFile} are also supported by BiocSet package.
}

\examples{
con <- system.file("extdata", "example.csv", package = "pipette")

## Row and column names enabled.
x <- import(con = con)
print(head(x))

## Row and column names disabled.
x <- import(con = con, rownames = FALSE, colnames = FALSE)
print(head(x))
}
\seealso{
Packages:
\itemize{
\item \href{https://bioconductor.org/packages/BiocIO/}{BiocIO}.
\item \href{https://r-datatable.com/}{data.table}.
\item \href{https://readr.tidyverse.org/}{readr}.
\item \href{https://vroom.r-lib.org/}{vroom}.
\item \href{https://readxl.tidyverse.org/}{readxl}.
\item \href{https://bioconductor.org/packages/rtracklayer/}{rtracklayer}.
\item \href{https://bioconductor.org/packages/maftools/}{maftools}.
\item \href{https://bioconductor.org/packages/Rsamtools/}{Rsamtools}.
\item \href{https://cran.r-project.org/package=rio}{rio}.
}

Import functions:
\itemize{
\item \code{BiocIO::import()}.
\item \code{data.table::fread()}.
\item \code{maftools::read.maf()}.
\item \code{readr::read_delim()}.
\item \code{rio::import()}.
\item \code{rtracklayer::import()}.
\item \code{utils::read.table()}.
\item \code{vroom::vroom()}.
\item \code{Rsamtools::scanBam}.
\item \code{Rsamtools::scanBcf}.
}
}
