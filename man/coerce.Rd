% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/AllGenerics.R, R/coerce-methods.R
\name{as.DataFrame}
\alias{as.DataFrame}
\alias{as.data.frame}
\alias{as.data.table}
\alias{as_tibble}
\alias{coerce}
\alias{as_tibble.DataFrame}
\alias{as_tibble.GenomicRanges}
\alias{as_tibble.IntegerRanges}
\alias{as.data.table.DataFrame}
\alias{as.data.table.IntegerRanges}
\alias{as.data.table.GenomicRanges}
\alias{as.DataFrame,GenomicRanges-method}
\alias{as.DataFrame,IntegerRanges-method}
\alias{as.DataFrame,SimpleList-method}
\alias{as.DataFrame,data.table-method}
\alias{as.DataFrame,list-method}
\alias{as.DataFrame,tbl_df-method}
\alias{coerce,DataFrame,data.table-method}
\alias{coerce,DataFrame,tbl_df-method}
\alias{coerce,GenomicRanges,data.table-method}
\alias{coerce,GenomicRanges,tbl_df-method}
\alias{coerce,IntegerRanges,data.table-method}
\alias{coerce,IntegerRanges,tbl_df-method}
\alias{coerce,data.table,DataFrame-method}
\alias{coerce,tbl_df,DataFrame-method}
\title{Coercion methods}
\usage{
as.DataFrame(x, ...)

as.data.frame(x, row.names = NULL, optional = FALSE, ...)

as.data.table(x, keep.rownames = FALSE, ...)

\method{as_tibble}{DataFrame}(
  x,
  ...,
  rownames = pkgconfig::get_config("tibble::rownames", "rowname")
)

\method{as_tibble}{GenomicRanges}(
  x,
  ...,
  rownames = pkgconfig::get_config("tibble::rownames", "rowname")
)

\method{as_tibble}{IntegerRanges}(
  x,
  ...,
  rownames = pkgconfig::get_config("tibble::rownames", "rowname")
)

\method{as.data.table}{DataFrame}(x, keep.rownames = TRUE, ...)

\method{as.data.table}{IntegerRanges}(x, keep.rownames = TRUE, ...)

\method{as.data.table}{GenomicRanges}(x, keep.rownames = TRUE, ...)

\S4method{as.DataFrame}{GenomicRanges}(x)

\S4method{as.DataFrame}{IntegerRanges}(x)

\S4method{as.DataFrame}{SimpleList}(x, row.names = NULL)

\S4method{as.DataFrame}{data.table}(x)

\S4method{as.DataFrame}{list}(x, row.names = NULL)

\S4method{as.DataFrame}{tbl_df}(x)
}
\arguments{
\item{x}{An R object.}

\item{...}{Additional arguments.}

\item{rownames}{\code{logical(1)}.
Apply to row names.}

\item{keep.rownames}{Default is \code{FALSE}. If \code{TRUE}, adds the input object's names as a separate column named \code{"rn"}. \code{keep.rownames = "id"} names the column \code{"id"} instead.}

\item{row.names}{\code{NULL} or \code{character}.}
}
\value{
Modified object, of desired conversion class.
}
\description{
Coercion methods
}
\details{
These conversion methods are primarily intended to interconvert between
popular tabular formats in R, including \code{data.frame}, \code{data.table}, \code{tbl_df},
and the Bioconductor \code{DataFrame} classes.
}
\note{
Updated 2021-10-14.
}
\section{\code{DataFrame} (Bioconductor) coercion}{


Don't define \code{as()} coercion method for \code{list} here. It will create issues
with \code{data.frame} coercion. Use \code{as.DataFrame()} instead to coerce a \code{list}
to \code{DataFrame}.

Wrapping the columns in an \code{I()} should work when passing to \code{DataFrame()}.
See also \code{as_tibble()} for easy list to data frame coercion.

\code{as()} method definition causes issues with \code{data.frame} to \code{DataFrame}
coercion when defined, because \code{data.frame} inherits from list.
}

\section{\code{data.table} coercion}{


Our defined methods attempt to improve on the defaults in the data.table
package to ensure that row names are not dropped by default, which is a poor
default for bioinformatics. This is accomplished by setting
\code{keep.rownames = "rowname"} by default instead of \code{keep.rownames = NULL}.
Note that we're manually defining the \code{"rowname"} column instead of using
\code{TRUE}, to match the conventions used in our \code{as_tibble()} methods.
\subsection{S3 methods: \code{as.data.table()}}{

The package extends \code{as.data.table()} method support for these S4 classes:
\itemize{
\item \code{DataFrame} (from S4Vectors package).
\item \code{GenomicRanges} (from GenomicRanges package).
}
}

\subsection{S4 methods: \code{as()}}{

Since \code{data.table} is a class that extends \code{data.frame}, we need to define an
S4 coercion method that allows us to use \code{as()} to coerce an object to a
\code{data.table}.
}
}

\section{tibble (\code{tbl_df}) coercion}{


Our defined methods attempt to improve on the defaults in the tibble package
to ensure that row names are not dropped by default, which is a poor default
for bioinformatics. This is accomplished by setting \code{rownames = "rowname"} by
default instead of \code{rownames = NULL}.

Note that we're matching \code{as_tibble()} convention here, using \code{rowname} as
column for row names assignment. We also using similar internal assert checks
here, allowing atomic and/or list columns only.
\subsection{S3 methods: \code{as_tibble()}}{

The package extends \code{as_tibble()} method support for these S4 classes:
\itemize{
\item \code{DataFrame} (from S4Vectors package).
\item \code{GenomicRanges} (from GenomicRanges package).
}
}

\subsection{S4 methods: \code{as()}}{

Since \code{tbl_df} is a virtual class that extends \code{tbl} and \code{data.frame}, we
need to define an S4 coercion method that allows us to use \code{as()} to coerce
an object to a tibble.
}
}

\examples{
data(
    DataFrame,
    GenomicRanges,
    IntegerRanges,
    data.table,
    sparseMatrix,
    tibble,
    package = "AcidTest"
)

## `DataFrame` to `data.table` ====
from <- DataFrame
to <- as.data.table(from)
print(to)
to <- as(from, "data.table")
print(to)

## `DataFrame` to `tbl_df` (tibble) ====
from <- DataFrame
to <- as_tibble(from)
print(to)
to <- as(from, "tbl_df")
print(to)

## `GenomicRanges` to `data.table` ====
from <- GenomicRanges
to <- as.data.table(from)
print(to)
to <- as(from, "data.table")
print(to)

## `GenomicRanges` to `tbl_df` (tibble) ====
from <- GenomicRanges
to <- as_tibble(from)
print(to)
to <- as(from, "tbl_df")
print(to)

## `IntegerRanges` to `data.table` ====
from <- IntegerRanges
to <- as.data.table(from)
print(to)

## `IntegerRanges` to `tbl_df` (tibble) ====
from <- IntegerRanges
to <- as_tibble(from)
print(to)

## `data.table` to `DataFrame` ====
from <- data.table
to <- as.DataFrame(from)
head(to)
to <- as(from, "DataFrame")
head(to)

## `list` to `DataFrame` ====
## Use `as.DataFrame()` instead of `as()` for `list` class.
from <- list(
    "a" = list(c(1, 2), c(3, 4)),
    "b" = list(NULL, NULL)
)
to <- as.DataFrame(from)
to

## `tbl_df` (tibble) to `DataFrame` ====
from <- tibble
to <- as.DataFrame(from)
head(to)
to <- as(from, "DataFrame")
head(to)
}
\seealso{
\itemize{
\item \code{as.data.table()}.
\item \code{as_tibble()}.
\item \code{getClass("DataFrame")}.
\item \code{getClass("data.table")}.
\item \code{getClass("tbl_df")}.
}
}
