% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/AllGenerics.R, R/coerce-methods.R
\name{as.DFrame}
\alias{as.DFrame}
\alias{as.data.frame}
\alias{as.data.table}
\alias{as_tibble}
\alias{coerce}
\alias{as_tibble.DFrame}
\alias{as_tibble.IRanges}
\alias{as_tibble.GRanges}
\alias{as.data.table.DFrame}
\alias{as.data.table.IRanges}
\alias{as.data.table.GRanges}
\alias{as.DFrame,SimpleList-method}
\alias{as.DFrame,list-method}
\alias{as.data.frame,IRanges-method}
\alias{as.data.frame,Matrix-method}
\alias{coerce,DFrame,data.table-method}
\alias{coerce,DFrame,tbl_df-method}
\alias{coerce,GRanges,data.table-method}
\alias{coerce,GRanges,tbl_df-method}
\alias{coerce,IRanges,data.frame-method}
\alias{coerce,IRanges,data.table-method}
\alias{coerce,IRanges,tbl_df-method}
\alias{coerce,Matrix,DFrame-method}
\alias{coerce,Matrix,data.frame-method}
\alias{coerce,data.frame,data.table-method}
\alias{coerce,data.frame,tbl_df-method}
\alias{coerce,data.table,DFrame-method}
\alias{coerce,tbl_df,DFrame-method}
\title{Coercion methods}
\usage{
as.DFrame(x, ...)

as.data.frame(x, row.names = NULL, optional = FALSE, ...)

as.data.table(x, keep.rownames = FALSE, ...)

\method{as_tibble}{DFrame}(
  x,
  ...,
  rownames = pkgconfig::get_config("tibble::rownames", "rowname")
)

\method{as_tibble}{IRanges}(
  x,
  ...,
  rownames = pkgconfig::get_config("tibble::rownames", "rowname")
)

\method{as_tibble}{GRanges}(
  x,
  ...,
  rownames = pkgconfig::get_config("tibble::rownames", "rowname")
)

\method{as.data.table}{DFrame}(x, keep.rownames = TRUE, ...)

\method{as.data.table}{IRanges}(x, keep.rownames = TRUE, ...)

\method{as.data.table}{GRanges}(x, keep.rownames = TRUE, ...)

\S4method{as.DFrame}{SimpleList}(x, row.names = NULL)

\S4method{as.DFrame}{list}(x, row.names = NULL)

\S4method{as.data.frame}{IRanges}(x, row.names = NULL, optional = FALSE, ...)

\S4method{as.data.frame}{Matrix}(x, row.names = NULL, optional = FALSE, ...)
}
\arguments{
\item{x}{any \R object.}

\item{...}{Additional arguments.}

\item{rownames}{\code{logical(1)}.
Apply to row names.}

\item{keep.rownames}{Default is \code{FALSE}. If \code{TRUE}, adds the input object's names as a separate column named \code{"rn"}. \code{keep.rownames = "id"} names the column \code{"id"} instead.}

\item{row.names}{\code{NULL} or \code{character}.}

\item{optional}{logical. If \code{TRUE}, setting row names and
    converting column names (to syntactic names: see
    \code{\link[base]{make.names}}) is optional.  Note that all of \R's
    \pkg{base} package \code{as.data.frame()} methods use
    \code{optional} only for column names treatment, basically with the
    meaning of \code{\link[base]{data.frame}(*, check.names = !optional)}.
    See also the \code{make.names} argument of the \code{matrix} method.}
}
\value{
Modified object, of desired conversion class.
}
\description{
Coercion methods
}
\details{
These conversion methods are primarily intended to interconvert between
popular tabular formats in R, including \code{data.frame}, \code{data.table}, \code{tbl_df},
and the Bioconductor \code{DFrame} classes.
}
\note{
Updated 2021-10-14.
}
\section{\code{DFrame} (Bioconductor) coercion}{


Don't define \code{as()} coercion method for \code{list} here. It will create issues
with \code{data.frame} coercion. Use \code{as.DFrame()} instead to coerce a \code{list}
to \code{DFrame}.

Wrapping the columns in an \code{I()} works when passing to \code{DataFrame()}.
See also \code{as_tibble()} for easy list to data frame coercion.

\code{as()} method definition causes issues with \code{data.frame} to \code{DFrame}
coercion when defined, because \code{data.frame} inherits from list.
}

\section{\code{data.frame} coercion}{

\subsection{To \code{IRanges}}{

Default coercion of \code{IPosRanges} (i.e. \code{IRanges}) to \code{data.frame} currently
strips metadata in \code{mcols()}. However, GenomicRanges preserves this
information, so we're adding a tweaked coercion method here to improve
consistency.

Relevant methods:\if{html}{\out{<div class="sourceCode r">}}\preformatted{getMethod(
    f = "as.data.frame",
    signature = "GenomicRanges",
    where = asNamespace("GenomicRanges")
)
## IRanges inherits from `IPosRanges`.
getMethod(
    f = "as.data.frame",
    signature = "IPosRanges",
    where = asNamespace("IRanges")
)
}\if{html}{\out{</div>}}

See also:
\itemize{
\item https://github.com/Bioconductor/IRanges/issues/8
}
}
}

\section{\code{data.table} coercion}{


Our defined methods attempt to improve on the defaults in the data.table
package to ensure that row names are not dropped by default, which is a poor
default for bioinformatics. This is accomplished by setting
\code{keep.rownames = "rowname"} by default instead of \code{keep.rownames = NULL}.
Note that we're manually defining the \code{"rowname"} column instead of using
\code{TRUE}, to match the conventions used in our \code{as_tibble()} methods.
\subsection{S3 methods: \code{as.data.table()}}{

The package extends \code{as.data.table()} method support for these S4 classes:
\itemize{
\item \code{DFrame} (from S4Vectors package).
\item \code{GRanges} (from GenomicRanges package).
}
}

\subsection{S4 methods: \code{as()}}{

Since \code{data.table} is a class that extends \code{data.frame}, we need to define an
S4 coercion method that allows us to use \code{as()} to coerce an object to a
\code{data.table}.
}
}

\section{tibble (\code{tbl_df}) coercion}{


Our defined methods attempt to improve on the defaults in the tibble package
to ensure that row names are not dropped by default, which is a poor default
for bioinformatics. This is accomplished by setting \code{rownames = "rowname"} by
default instead of \code{rownames = NULL}.

Note that we're matching \code{as_tibble()} convention here, using \code{rowname} as
column for row names assignment. We also using similar internal assert checks
here, allowing atomic and/or list columns only.
\subsection{S3 methods: \code{as_tibble()}}{

The package extends \code{as_tibble()} method support for these S4 classes:
\itemize{
\item \code{DFrame} (from S4Vectors package).
\item \code{GRanges} (from GenomicRanges package).
}
}

\subsection{S4 methods: \code{as()}}{

Since \code{tbl_df} is a virtual class that extends \code{tbl} and \code{data.frame}, we
need to define an S4 coercion method that allows us to use \code{as()} to coerce
an object to a tibble.
}
}

\examples{
data(
    DFrame,
    GRanges,
    IRanges,
    data.table,
    sparseMatrix,
    tbl_df,
    package = "AcidTest"
)

## `DFrame` to `data.table` ====
x <- as(DFrame, "data.table")
x <- as.data.table(DFrame)
print(x)

## `DFrame` to `tbl_df` ====
x <- as(DFrame, "tbl_df")
x <- as_tibble(DFrame)
print(x)

## `GRanges` to `data.table` ====
x <- as(GRanges, "data.table")
x <- as.data.table(GRanges)
print(x)

## `GRanges` to `tbl_df` ====
x <- as(GRanges, "tbl_df")
x <- as_tibble(GRanges)
print(x)

## `IRanges` to `data.table` ====
x <- as(IRanges, "data.table")
x <- as.data.table(IRanges)
print(x)

## `IRanges` to `tbl_df` ====
x <- as(IRanges, "tbl_df")
x <- as_tibble(IRanges)
print(x)

## `Matrix` to `DFrame` ====
from <- sparseMatrix
to <- as(from, "DFrame")
to

## `Matrix` to `data.frame` ====
x <- as(sparseMatrix, "data.frame")
head(x)

## `data.table` to `DFrame` ====
from <- data.table
to <- as(from, "DFrame")
head(to)

## `list` to `DFrame` ====
## Use `as.DFrame()` instead of `as()` for `list` class.
from <- list(
    a = list(c(1, 2), c(3, 4)),
    b = list(NULL, NULL)
)
to <- as.DFrame(from)
to

## `tbl_df` to `DFrame` ====
from <- tbl_df
to <- as(from, "DFrame")
head(to)
}
\seealso{
\itemize{
\item \code{as.data.frame()}.
\item \code{as.data.table()}.
\item \code{as_tibble()}.
\item \code{getClass("DFrame")}.
\item \code{getClass("data.table")}.
\item \code{getClass("tbl_df")}.
}
}
