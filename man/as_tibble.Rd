% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/AllGenerics.R, R/coerce-as_tibble-methods.R
\name{as_tibble}
\alias{as_tibble}
\alias{as_tibble.DataFrame}
\alias{as_tibble.GenomicRanges}
\alias{as_tibble.IntegerRanges}
\title{Coerce an object to a tibble}
\usage{
as_tibble(
    x,
    ...,
    .rows = NULL,
    .name_repair = c("check_unique", "unique", "universal", "minimal"),
    rownames = pkgconfig::get_config("tibble::rownames", NULL)
)

\method{as_tibble}{DataFrame}(
  x,
  ...,
  rownames = pkgconfig::get_config("tibble::rownames", "rowname")
)

\method{as_tibble}{GenomicRanges}(
  x,
  ...,
  rownames = pkgconfig::get_config("tibble::rownames", "rowname")
)

\method{as_tibble}{IntegerRanges}(
  x,
  ...,
  rownames = pkgconfig::get_config("tibble::rownames", "rowname")
)
}
\arguments{
\item{x}{Object.}

\item{...}{Additional arguments.}

\item{.rows, .name_repair, rownames}{Refer to \code{tibble::as_tibble} usage details.}
}
\value{
\code{tbl_df} (tibble).
}
\description{
Coerce an object to a tibble
}
\details{
Our defined methods attempt to improve on the defaults in the tibble package
to ensure that row names are not dropped by default, which is a poor default
for bioinformatics. This is accomplished by setting \code{rownames = "rowname"} by
default instead of \code{rownames = NULL}.

Note that we're matching \code{as_tibble()} convention here, using \code{rowname} as
column for row names assignment. We also using similar internal assert checks
here, allowing atomic and/or list columns only.

The package extends \code{as_tibble()} method support for these S4 classes:
\itemize{
\item \code{DataFrame} (from S4Vectors package).
\item \code{GenomicRanges} (from GenomicRanges package).
}
}
\note{
Updated 2022-02-08.
}
\examples{
data(
    DataFrame,
    GenomicRanges,
    IntegerRanges,
    package = "AcidTest"
)

## `DataFrame` to `tbl_df` ====
from <- DataFrame
to <- as_tibble(from)
print(to)

## `GenomicRanges` to `tbl_df` ====
from <- GenomicRanges
to <- as_tibble(from)
print(to)

## `IntegerRanges` to `tbl_df` ====
from <- IntegerRanges
to <- as_tibble(from)
print(to)
}
\seealso{
\itemize{
\item \code{tibble::as_tibble()}.
}
}
